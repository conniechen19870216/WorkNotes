1. 功能名称：目录搜索依赖文件功能
   功能效果：不更改规则，只更改依赖文件的搜索目录
   适用场合：在一个较大工程里面，一般将源代码.c文件和二进制文件（.o文件和可执行文件）放在不同的目录中
             进行区域管理。
	
2. 一般搜索（VPATH）
(1) 指定了Makefile中所有文件的搜索路径，包括目标文件和依赖文件
(2) 使用空格或者:来将多个需要搜索的目录分开
(3) 搜索顺序：当前目录，定义的依次顺序
(4) VPATH=src:./headers

3. 选择性搜索（vpath）
(1) vpath PATTERN DIRECTORIES
(2) vpath PATTERN: 清除符合模式PATTERN的文件设置的搜索路径
(3) vpath: 清除所有已被设置的文件搜索路径
    vpath %.c foo
    vpath %.c blish
    vpath %.c bar

4. 自动化变量存在的意义
(1) make 在执行时,通过目录搜索得到的“目标文件”和“依赖文件”可能会在其它目录(此时依赖文件为文件的完整路径名),
    但是已经存在的规则命令却不能发生变化。因此,书写命令时我们必须保证当依赖文件在其它目录下被发现时规则的命令
	能够正确执行。
(2) 规则命令行中的自动化变量“$^”代表所有通过目录搜索得到的依赖文件的完整路径名(目录 + 一般文件名)列表。
    “$@”代表规则的目标。
	foo.o : foo.c
	cc -c $(CFLAGS) $^ -o $@

5. 目录搜索的机制（举例说明）-- 同时适用于隐含规则的目录搜索，即隐含规则的命令行中使用了自动化变量
(1) VPATH: 设置目标文件和其依赖文件的搜索路径，配合以自动化变量来使用；
(2) GPATH：当规则的目标需要重建，并且在VPATH定义的搜索路径中存在规则的目标，GPATH定义为此搜索到的路径时，重建之后的目标
           会放在原有的位置，而不是当前的工作路径。
Example 1.
   存在一个目录“prom”, “prom”的子目录“src”下存在“sum.c”和“memcp.c”两个源文件。在“prom”目录下的 Makefile 部分内容如下:
   LIBS = libtest.a
   VPATH = src
   libtest.a : sum.o memcp.o
   $(AR) $(ARFLAGS) $@ $^

   i)  首先, 如果在两个目录(“prom”和“src”)都不存在目标“libtest.a”, 执行 make 时将会在当前目录下创建目标文件“libtest.a”。
   ii) 其次，如果“src”目录下已经存在“libtest.a”, 以下两种不同的执行结果:
       a) 规则的目标不需要重建:
	      当它的两个依赖文件“sum.c”和“memcp.c”没有被更新的情况下我们执行make,首先 make 程序会搜索到目录“src”下的已经存在
	      的目标“libtest.a”。由于目标“libtest.a”的依赖文件没有发生变化,所以不会重建目标。并且目标所在的目录不会发生变化。

       b) 规则的目标需要重建:
	      当我们修改了文件“sum.c”或者“memcp.c”以后执行 make。“libtest.a”和“sum.o”或者“memcp.o”文件将会被在当前目录下创建
	      (目标完整路径名被废弃),而不是在“src”目录下更新这些已经存在的文件。此时在两个目录下(“prom”和“src”)同时存在文件
		  “libtest.a”。但只有“prom/libtest.a”是最新的库文件。

Example 2.
    LIBS = libtest.a
	GPATH = src
	VPATH = src
	LDFLAGS += -L ./. –ltest

	i)  同样，当两个目录都不存在目标文件“libtest.a” 时, 目标仍然会在当前目录 “prom”(目录)下创建。
	ii) 如果“src”目录下已经存在目标文件“libtest.a”。当其依赖文件任何一个被改变以后执行 make,目标“libtest.a”将会被在“src”目录
	    下被更新(目标完整路径名不会被废弃)。

(3) 文字说明：
   a) 规则的目标不需要重建:
      那么通过目录搜索得到的所有完整的依赖文件路径名有效,同样,规则的目标文件的完整的路径名同样有效。就是说,当规则的目标不需要被重建时,
      规则中的所有的文件完整的路径名有效。已经存在的目标文件所在的目录不会被改变。
   b) 规则的目标需要重建:
      那么通过目录搜索所得到的目标文件的完整的路径名无效,规则中的目标文件将会被在工作目录下重建。就是说,当规则的目标需要重建时,规则的目标
      文件会在工作目录下被重建, 而不是在目录搜寻时所得到的目录。这里,必须明确:
      此种情况只有目标文件的完整路径名失效,依赖文件的完整路径名是不会失效的。否则将无法重建目标。

(4) $@: 代表规则的目标
    $^: 代表所有通过目录搜索得到的依赖文件的完整路径名(目录 + 一般文件名)列表
    $<: 代表规则中通过目录搜索得到的依赖文件列表的第一个依赖文件

