1. 编译:
把高级语言书写的代码转换为机器可识别的机器指令。编译高级语言后生成的指令虽然可被机器识别,但是还不能被执行。编译时,编译器检查高级语言的语法、
函数与变量的声明是否正确。只有所有的语法正确、相关变量定义正确编译器就可以编译出中间目标文件。通常,一个高级语言的源文件都可对应一个目标文件。
目标文件在Linux 中默认后缀为“.o”(如“foo.c”的目标文件为“foo.o”)。

2. 链接:
将多.o 文件,或者.o 文件和库文件链接成为可被操作系统执行的可执行程序(Linux 环境下,可执行文件的格式为“ELF”格式)。链接器不检查函数所在的源文件,
只检查所有.o 文件中的定义的符号。将.o 文件中使用的函数和其它.o 或者库文件中的相关符号进行合并,对所有文件中的符号进行重新安排(重定位),并链接系统
相关文件(程序启动文件等)最终生成可执行程序。链接过程使用 GNU 的“ld”工具。

3. 静态库:
又称为文档文件(Archive File)。它是多个.o 文件的集合。Linux 中静态库文件的后缀为“.a”。静态库中的各个成员(.o 文件)没有特殊的存在格式,仅仅是
一个.o 文件的集合。使用“ar”工具维护和管理静态库。

4. 共享库:也是多个.o 文件的集合,但是这些.o 文件时有编译器按照一种特殊的方式生成(Linux 中,共享库文件格式通常为“ELF”格式。共享库已经具备了可
执行条件)。模块中各个成员的地址(变量引用和函数调用)都是相对地址。使用此共享库的程序在运行时,共享库被动态加载到内存并和主程序在内存中进行连接。
多个可执行程序可共享库文件的代码段(多个程序可以共享的使用库中的某一个模块,共享代码,不共享数据)。另外共享库的成员对象可被执行(由 libdl.so 提供支持)。

注：ELF是一种文件类型，linux生成的可执行文件的格式，而不论文件名称到底是神马。

5. Examples:
(1) 静态库
kavonm@ubuntu:~/majun/scripting/C_C++/lib_a$ vi print.c                                                                        
kavonm@ubuntu:~/majun/scripting/C_C++/lib_a$ vi main.c
kavonm@ubuntu:~/majun/scripting/C_C++/lib_a$ gcc -c print.c -O2
kavonm@ubuntu:~/majun/scripting/C_C++/lib_a$ ls
main.c  print.c  print.o
kavonm@ubuntu:~/majun/scripting/C_C++/lib_a$ ar -rsv libpr.a print.o
ar: creating libpr.a
a - print.o
kavonm@ubuntu:~/majun/scripting/C_C++/lib_a$ ls
libpr.a  main.c  print.c  print.o
kavonm@ubuntu:~/majun/scripting/C_C++/lib_a$ gcc -o main main.c -L./ -lpr
kavonm@ubuntu:~/majun/scripting/C_C++/lib_a$ ls
libpr.a  main  main.c  print.c  print.o
kavonm@ubuntu:~/majun/scripting/C_C++/lib_a$ ./main
This is the lib src!
(2) 共享库
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ ls
main.c  print.c
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ gcc -o libpr.so -O2 -shared -fPIC print.c
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ ls
libpr.so  main.c  print.c
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ gcc -o main main.c -L./ -lpr
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ ./main
./main: error while loading shared libraries: libpr.so: cannot open shared object file: No such file or directory
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ export LD_LIBRARY_PATH=.:$LD_LIBRARY_PATH
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ ./main
This is the lib src!
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ ldd main
        linux-gate.so.1 =>  (0x005f9000)
        libpr.so => ./libpr.so (0x00a58000)
        libc.so.6 => /lib/i386-linux-gnu/libc.so.6 (0x00110000)
        /lib/ld-linux.so.2 (0x0089e000)
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ nm main
08049f20 d _DYNAMIC
08049ff4 d _GLOBAL_OFFSET_TABLE_
...
0804a018 b dtor_idx.6088
08048480 t frame_dummy
080484a4 T main
         U print1
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ strip main
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ nm main
nm: main: no symbols
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ readelf -a main
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF32
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Size of program headers:           32 (bytes)

Relocation section '.rel.dyn' at offset 0x35c contains 1 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
08049ff0  00000206 R_386_GLOB_DAT    00000000   __gmon_start__

...
    Build ID: 27dea6bd75d7d24e58de15620f2d67f6d0a04861
kavonm@ubuntu:~/majun/scripting/C_C++/lib_so$ objdump -a main

main:     file format elf32-i386
main
