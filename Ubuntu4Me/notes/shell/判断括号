1. [  ] :条件测试. 条件测试表达式放在[ ]中.

2. [[  ]]:是一个扩展的"[   ]"命令,[[  ]]结构比[ ]结构更加通用. 使用[[ ... ]]条件判断结构, 而不是[ ... ], 能够防止脚本中的许多逻辑错误. 比如, &&, ||, <, 和> 操作符能够正常存在于[[ ]]条件判断结构中, 但是如果出现在[ ]结构中的话, 会报错.

3. (( )) :整数扩展. 扩展并计算在(( ))中的整数表达式. 双圆括号结构也被认为是在Bash中使用C语言风格操作变量的一种处理机制.

4. if [ "$YN" = Y -o "$YN" = y -o "$YN" = "Yes" -o "$YN" = "yes" -o "$YN" = "YES" ]
   if [[ "$YN" = Y || "$YN" = y || "$YN" = "Yes" || "$YN" = "yes" || "$YN" = "YES" ]]
   if [ "$YN" = Y ] || [ "$YN" = y ] || [ "$YN" = "Yes" ] || [ "$YN" = "yes" ] || [ "$YN" = "YES" ]

5. 
    comd1 && {
        comd2
        comd3
        :
    } || {
        comd4
        comd5
    }

6. 
$ a=5; b=7; c=2
$ echo $(( a+b*c ))
19
$ echo $(( (a+b)/c ))
6
$ echo $(( (a*b)%c))
1

在 $(( )) 中的變量名稱，可於其前面加 $ 符號來替換，也可以不用，如：
$(( $a + $b * $c)) 也可得到 19 的結果

7. 
    <    小于(在双括号中使用)    (("$a" < "$b"))
    <=    小于等于(在双括号中使用)    (("$a" <= "$b"))
    >    大于(在双括号中使用)    (("$a" > "$b"))
    >=    大于等于(在双括号中使用)    (("$a" >= "$b"))

    =    等于    if [ "$a" = "$b" ]
    ==    等于    if [ "$a" == "$b" ],与=等价.
    !=    不等号    if [ "$a" != "$b" ],这个操作符将在[[ ... ]]结构中使用模式匹配.
    <    小于, 按照ASCII字符进行排序,if [[ "$a" < "$b" ]],if [ "$a" \< "$b" ],注意"<"使用在[ ]结构中的时候需要被转义.
    >    大于, 按照ASCII字符进行排序    if [[ "$a" > "$b" ]],if [ "$a" \> "$b" ],注意">"使用在[ ]结构中的时候需要被转义.

8.
    #!/bin/bash
    if (( $# != 2 )); then
    echo "Usage: $0 modi_days size " 1>&2
    exit 1
    fi

    if (( $1 < 0 || $1 > 30 )) ; then
    echo "modi_days is out of range"
    exit 2
    fi

    if (( $2 <= 20 )) ; then
    echo "The size is out of range"
    exit 3
    fi

9.
    [ -f "somefile" ] ：判断是否是一个文件
    [ -x "/bin/ls" ] ：判断/bin/ls是否存在并有可执行权限
    [ -n "$var" ] ：判断$var变量是否有值
    [ "$a" = "$b" ] ：判断$a和$b是否相等

10.
    if ....; then
        ....
    elif ....; then
        ....
    else
        ....
    fi

    case ... in
    ...) do something here
    esac
